set -o vi
stty -ixon

parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

function diffuse-rev() {
    diffuse -s -D -r $1 -r $2 `git diff --name-only $1...$2`
}

function test-widget() {
    xvfb-run gulp tests --tests="tests/$1/**" --browser="$2"
}

function find_docker_container_name() {
  CONTAINER_NAME=$(docker ps --format '{{.Names}}' | grep $1)
  echo $CONTAINER_NAME
}
function dbash() {
    docker exec -it `find_docker_container_name $1` bash -c "stty cols 200 && ./entrypoint.sh bash"
}

function drun() {
    docker exec -it `find_docker_container_name $1` bash -c "stty cols 200 && ./entrypoint.sh bash -c '$2'"
}

function dsql() {
    docker exec -u postgres -it forms_db_1 bash -c 'stty cols 200 && psql'

}

function dnpm() {
    drun frontend "cd /var/www/forms/ui && npm $*"
}

function ddjango() {
    drun django "cd /var/www/forms/forms && $*"
}

function dmanage() {
    ddjango ./manage.py $*
}

function dshell() {
    ddjango ./manage.py shell_plus
}

function dmigrate() {
    ddjango ./manage.py migrate $*
}

function venv() {
    source activate $1
}

alias de_venv="source deactivate"

function dlogs() {
    APP=${1:-app}

    docker-compose  -p $APP \
                    -f ~/hs/dev/docker-compose.infra.dev.yml \
                    -f ~/hs/dev/docker-compose.forms.dev.yml \
                    logs -f
}

snapshotswd="$HOME/hs/snapshots"
hsdevwd="~/hs/dev"
alias hssnapshots='ls $snapshotswd'

function snapshotwd() {
  echo "$snapshotswd/${1?'Define snapshot, please!'}"
}

function hsclean() {
    local snapshot=$(snapshotwd $1)

    sudo rm -rf $snapshot
}

function hsbackup() {
    if [[ "$1" == "-f" ]]; then
      hsclean $2
      shift
    fi

    local snapshot=$(snapshotwd $1)

    mkdir -p "$snapshot"
    sudo mv -i ~/hs/dev/postgres_forms/ "$snapshot/postgres_forms"
    sudo mv -i ~/hs/dev/venv/ "$snapshot/venv"

    sudo chown -R `whoami`:`groups | cut -d' ' -f1` "$snapshot/postgres_forms" "$snapshot/venv"
}

function hsrestore() {
    local snapshot=$(snapshotwd $1)

    sudo cp -rf "$snapshot"/* ~/hs/dev/
}

function hsreset() {
    sudo rm -rf ~/hs/dev/{postgres_forms,venv}
}


function hsswap() {
    hsbackup $*
    hsrestore $@[-1]
}

# psql backup/restore
hs_db_snapshots="$HOME/hs/db_backup"
function hs_db_backup() {
    pg_dump form > "$hs_db_snapshots/${1?'Define psql dump name'}.backup"
}
function hs_db_restore() {
    local dump_name="$hs_db_snapshots/${1?'Define psql dump name'}.backup"
    ! [ -f "$dump_name" ] && echo 'Dump does not exist' && return 1
    dropdb form
    createdb form
    psql --single-transaction form < $dump_name
}

function url () { xdg-open $1 1>/dev/null 2>&1 }
function circle () { url https://circleci.com/gh/hyperscience/forms/${1+tree/}${1} }

function mdown_lynx () { pandoc $1 | lynx -force_html -stdin }
function mdown () { pandoc $1 | w3m -T text/html }

export PATH="$HOME/.pyenv/bin:$PATH"
which pyenv >/dev/null && eval "$(pyenv init -)"
which pyenv >/dev/null && eval "$(pyenv virtualenv-init -)"

export PATH="$HOME/.local/bin:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="$PATH:$HOME/tools/dasht/bin"
export PATH="$PATH:/snap/bin"
export PATH="$PATH:$HOME/.bashers"

source $HOME/.bashers/todo.sh

# python executables
local PYTHON_BASE=`python3 -c 'import site; print(site.USER_BASE)'`
export PIP_PACK_DIR=`python3 -c 'import site; print(site.USER_SITE)'`
export PATH="$HOME/anaconda3/bin:$PATH"
export PATH="$PYTHON_BASE/bin:$PATH"
export POWERLINE_CONFIG_COMMAND=powerline-config

export MANPATH="$HOME/tools/dasht/man:$MANPATH"

export PATH="/usr/local/opt/postgresql@10/bin:$PATH"

[[ -e $(which pipenv) ]] && eval "$(pipenv --completion)"

[[ -e $(which gh) ]] && eval "$(gh completion --shell ${SHELL##*/})"

export EDITOR='nvim'
export BROWSER=vivaldi
[ $(uname) = "Darwin" ] && export BROWSER=/Applications/Vivaldi.app/Contents/MacOS/Vivaldi

export JIRA_URL='https://hyperscience.atlassian.net'

# deno
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# aws
export AWS_PROFILE=niko
