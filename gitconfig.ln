[user]
    name = Nikodim Lazarov
    email = nlazarov@gmail.com

[core]
    autocrlf = false
    whitespace = cr-at-eol
    excludesfile = ~/.gitignore
    ignorecase = false

[color]
    ui = true

[format]
    pretty = %Cblue%h%Creset %Cgreen[%cr]%Creset (%an) %s

[diff]
    tool = meld
	algorithm = patience

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld \"$LOCAL\" \"$REMOTE\"

[difftool "kdiff"]
    cmd = kdiff3 \"$LOCAL\" \"$REMOTE\"

[difftool "vim"]
    tool = vimdiff

[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"

[merge]
    tool = meld

[mergetool]
    prompt = false

[mergetool "meld"]
    cmd = meld '$BASE $LOCAL $REMOTE $MERGED'
    trustExitCode = false

[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true

[ff]
    tool = meld

[github]
    user = nlazarov
    token = [SECRET]

[alias]
    a = add
    c = commit -m
    ca = commit --amend
    co = checkout
    pick = cherry-pick

    # cherry-pick from ... to ...
    cpf2 = "!f() { git checkout $2 && git pull --rebase && git cherry-pick $1 && git push && git checkout $1 ; }; f"

    # cherry-pick from current to ....
    cp2 = "!f() { git cpf2 `git current` $1 ; }; f"

    # cherry-pick from master to production
    cpp = cpf2 master production

    current = rev-parse --abbrev-ref HEAD
    d = diff
    dc = diff --cached
    dt = difftool
    dtc = difftool --cached

    l = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%an%Creset (%cr)' --abbrev-commit --date=relative
    out = log origin..HEAD

    p = push
    pf = push -f
    pu = "!git push -u origin `git current`"
    po = push origin

    # pull --rebase, and preserve merge commits
    pl = "!f() { git fetch --prune; git rebase --preserve-merges `git tracked` ; }; f"
    pr = pull --rebase=preserve

    sync = "!f() { git pl && git push ; }; f"
    stash-sync = "!f() { git stash && git sync && git stash pop ; }; f"

    reset-origin = "!git reset --hard origin/`git current`"
    rbb = "!f() { local rbb=`git current`; git rebase --onto $1 \"$rbb~${2-0}\" $rbb ; }; f"
    rborig = "!f() { local rbb=`git current`; git rbb \"origin/$rbb\" $1 ; }; f"
    rbm = "!f() { git rbb master $1 ; }; f"
    rbom = "!f() { git rbb origin/master $1 ; }; f"

    product = "!f() { local cb=`git current`; git checkout product-niko; git reset --hard $cb; git push --force; git checkout $cb; git prune; }; f"

    qpl = log --pretty=\"%Cblue%h%Creset %Cgreen[%cr]%Creset %s\" origin/production..origin/master
    s = status
    squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
    subu = submodule update
    meld = "!meld $(git rev-parse --show-toplevel)"
    tracked = rev-parse --abbrev-ref --symbolic-full-name @{u}

    ctags = "!.git/hooks/ctags"

    jshint = "!eslint `git diff --name-only | grep '\\.js$' | tr '\n' ' '`"
    root = rev-parse --show-toplevel

    review = "!git dt -d \"origin/master...$1\"  #"

    #############################
    # public/private mirrors aliases
    #############################
    pl = "!git fetch --prune && git rebase --preserve-merges `git rev-parse --abbrev-ref --symbolic-full-name @{u}`"

    # Bring alias from public repo to private
    put-in-master = "!git checkout master && git pl && git cherry-pick core/master && git push && git checkout core-master"

    # use this when cherry picking from private to public
    drop-deleted-by-us = "!git rm `git status --porcelain | grep ^DU | cut -d' ' -f2`"

    # skip a cherry-pick when in progress
    skip-cherry = "!git reset; git clean -df; git cherry-pick --continue"

[branch]
    autosetuprebase = always

[push]
    default = tracking

[init]
    templatedir = ~/.git_template
