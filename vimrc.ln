set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin('~/.vim/bundle/')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo

Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'xuyuanp/nerdtree-git-plugin'
Plugin 'kien/ctrlp.vim'
Plugin 'ternjs/tern_for_vim'
Plugin 'valloric/youcompleteme'
Plugin 'int3/vim-extradite'
Plugin 'gregsexton/gitv'
Plugin 'junegunn/gv.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'chrisbra/vim-diff-enhanced'
Plugin 'tpope/vim-rhubarb'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tomtom/tcomment_vim'
Plugin 'embear/vim-localvimrc'

Plugin 'scrooloose/syntastic'
Plugin 'gcorne/vim-sass-lint'

Plugin 'mhinz/vim-startify'
Plugin 'rizzatti/dash.vim'
Plugin 'sunaku/vim-dasht'

Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'rakr/vim-one'
Plugin 'YorickPeterse/happy_hacking.vim'
Plugin 'jansenfuller/crayon'
Plugin 'vim-scripts/wombat256.vim'
Plugin 'dikiaap/minimalist'
Plugin 'w0ng/vim-hybrid'

Plugin 'chiel92/vim-autoformat'

Plugin 'christoomey/vim-tmux-navigator'
Plugin 'mileszs/ack.vim'

Plugin 'leafgarland/typescript-vim'
Plugin 'herringtondarkholme/yats.vim'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'jiangmiao/auto-pairs'
Plugin 'mattn/emmet-vim'

Plugin 'ervandew/supertab'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

"ReactJS
Plugin 'pangloss/vim-javascript'
Plugin 'maxmellon/vim-jsx-pretty'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

let g:airline_theme='badwolf'
set background=dark

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,prc
set autoindent
set ts=4
filetype on

set mouse=a

syntax on
set ignorecase
set smartcase
set hlsearch
set modelines=0
set wildmenu
set wildmode=longest:full
set nu "line numbers

"for indenting
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab
vmap <Tab> >gv
vmap <S-Tab> <gv
inoremap <S-Tab> <C-D>

set lbr "word wrap
set tw=500

set wrap "Wrap lines
set scrolloff=3

set hid "only hide opened files for faster switching

" prefer vertical diff
set diffopt+=vertical

" all backup moved at one place
set backupdir=~/.vim/backup,.
set directory=~/.vim/backup,.

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " " " Leader is the space key
let g:mapleader = " "

let maplocalleader = "\\"
let g:maplocalleader = "\\"

" easier write
nmap <leader>w :w!<cr>
" easier quit
nmap <leader>q :q<cr>
nmap <leader>Q :q!<cr>
" silence search highlighting
nnoremap <leader>h :nohlsearch<CR>

"paste from outside buffer
nnoremap <leader>p :set paste<CR>"+p:set nopaste<CR>
vnoremap <leader>p <Esc>:set paste<CR>gv"+p:set nopaste<CR>

"copy to outside buffer
nnoremap <leader>y "+yy
vnoremap <leader>y "+y

"select all
nnoremap <leader>a ggVG
"paste from 0 register
"Useful because `d` overwrites the <quote> register
nnoremap <leader>P "0p
vnoremap <leader>P "0p

" Navigation in splits
""""""""""""""""""""""""""""""
map <C-h> :call WinMove('h')<cr>
map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-l> :call WinMove('l')<cr>

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

" move in long lines
nnoremap k gk
nnoremap j gj

nnoremap <F5> :e%<CR>

" Mappings to access buffers (don't use "\p" because a
" delay before pressing "p" would accidentally paste).
" \l       : list buffers
" \b \f \g : go back/forward/last-used
" \1 \2 \3 : go to buffer 1/2/3 etc
nnoremap <Leader>l :ls<CR>
" unimpaired [b ]b for previous/next buffer
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" runners
" Run ruby when typing <leader>r
noremap <buffer> <leader>r :w<cr> :exec '!ruby' shellescape(@%, 1)<cr>
noremap <buffer> <leader>e :w<cr> :exec '!node' shellescape(@%, 1)<cr>
noremap <buffer> <leader>m :w<cr> :make<cr><cr>

nnoremap <leader>f :NERDTreeFind<cr>
nnoremap <leader>t :NERDTreeToggle<cr>
nnoremap <leader>s :Gstatus<cr>

nnoremap <leader>jd :YcmCompleter GoTo<CR>
nnoremap <leader>jh :YcmCompleter GetDoc<CR>
nnoremap <leader>jf :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jr :YcmCompleter GoToReferences<CR>

command! Vimrc :tabe ~/.vimrc
command! Srcvim :source ~/.vimrc

"automatically change the PWD to the current file direction
" set autochdir

" autoload buffers
set autoread
autocmd FocusGained * checktime

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
" autocmd BufWritePost * silent execute "! [ -e .git/hooks/ctags ] && .git/hooks/ctags &"
autocmd FileType javascript setlocal suffixesadd+=.es6
autocmd BufRead,BufNewFile *.es6 set filetype=javascript


" find files in project
set path+=**
" still exclude node_modules from the search; could use the ctrlp for this one
set wildignore+=**/node_modules/**
set wildignore+=**/bower_components/**
set wildignore+=**/site-packages/**

" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

let g:syntastic_typescript_checkers = ['tslint']
let g:syntastic_javascript_checkers = ['eslint']

"vim-airline"
set laststatus=2 " statusbar in single file open
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols = get(g:, 'airline_symbols', {})
let g:airline_symbols.space = "\ua0"
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

"sass-lint"
let g:syntastic_sass_checkers=["sasslint"]
let g:syntastic_scss_checkers=["sasslint"]

"emmet settings"
let g:user_emmet_install_global = 1
autocmd FileType html,css,javascript EmmetInstall

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.dotfiles/UltiSnips"

imap <c-tab> *<Esc>:call UtliSnips#ListSnippets()<CR>

" auto close preview window
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_python_binary_path = 'python'
let g:ycm_min_num_of_chars_for_completion = 1

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" alternative solution to working tabs for YCM and UltiSnips
" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction
"
" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" enable patience diff
" started In Diff-Mode set diffexpr (plugin not loaded yet)
if &diff
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif

" tern.js settings
let tern_map_keys=1

" reactjs
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" localvimrc
let g:localvimrc_persistent = 1

""" dasht
" search related docsets
nnoremap <Leader>K :Dasht<Space>

" search ALL the docsets
nnoremap <Leader><Leader>K :Dasht!<Space>

" word expand search related docsets
nnoremap <silent> <Leader>k :call Dasht([expand('<cword>'), expand('<cWORD>')])<Return>

" word expand search ALL the docsets
nnoremap <silent> <Leader><Leader>k :call Dasht([expand('<cword>'), expand('<cWORD>')], '!')<Return>

" search selection in related docsets
vnoremap <silent> <Leader>k y:<C-U>call Dasht(getreg(0))<Return>

" search selection in ALL the docsets
vnoremap <silent> <Leader><Leader>k y:<C-U>call Dasht(getreg(0), '!')<Return>

let g:dasht_filetype_docsets = {}
let g:dasht_filetype_docsets['less'] = ['css']
let g:dasht_filetype_docsets['javascript'] = ['js', 'jquery', 'lodash', 'react']
let g:dasht_filetype_docsets['python'] = ['django']

colorscheme wombat256mod
