set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'kien/ctrlp.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'int3/vim-extradite'
Plug 'gregsexton/gitv'
Plug 'junegunn/gv.vim'
Plug 'rbong/vim-flog'
Plug 'airblade/vim-gitgutter'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tomtom/tcomment_vim'
Plug 'embear/vim-localvimrc'

Plug 'dense-analysis/ale'
Plug 'gcorne/vim-sass-lint'

Plug 'mhinz/vim-startify'
Plug 'rizzatti/dash.vim'
Plug 'sunaku/vim-dasht'

Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'rakr/vim-one'
Plug 'YorickPeterse/happy_hacking.vim'
Plug 'jansenfuller/crayon'
Plug 'vim-scripts/wombat256.vim'
Plug 'dikiaap/minimalist'
Plug 'w0ng/vim-hybrid'
Plug 'morhetz/gruvbox'


Plug 'chiel92/vim-autoformat'
Plug 'terryma/vim-multiple-cursors'

Plug 'christoomey/vim-tmux-navigator'
Plug 'mileszs/ack.vim'
Plug 'brooth/far.vim'

" TypeScirpt "
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'herringtondarkholme/yats.vim'

Plug 'ntpeters/vim-better-whitespace'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'stephenway/postcss.vim'

" Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

"ReactJS
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

" Python
" Plug 'vim-vdebug/vdebug'
Plug 'puremourning/vimspector'


" Ruby
Plug 'vim-ruby/vim-ruby'

" diff
Plug 'lambdalisue/vim-unified-diff'
Plug 'lambdalisue/vim-improve-diff'

" All plugin must be added in the plug scope (before next line)
call plug#end()
filetype plugin indent on    " required
"
" Brief help
" :PluginStatus     - check status of plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginUpgrade    - upgrade vim-plug
" :PlugDiff         - examine changes from the previous update and the pending changes
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vim-plug for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

let g:airline_theme='badwolf'
set background=dark

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,prc
set autoindent
set ts=4
filetype on

set mouse=a

" Better display for messages
set cmdheight=2

syntax on
set ignorecase
set smartcase
set hlsearch
set modelines=0
set wildmenu
set wildmode=longest:full
set nu "line numbers

"for indenting
set shiftwidth=2
set tabstop=2
set expandtab
set smarttab
vmap <Tab> >gv
vmap <S-Tab> <gv
inoremap <S-Tab> <C-D>

set lbr "word wrap
set tw=500

set updatetime=300
set signcolumn=yes

set wrap "Wrap lines
set scrolloff=3
set hid "only hide opened files for faster switching
set backspace=indent,eol,start

" set spell
" autocmd FileType git,gitv setlocal nospell

set lazyredraw

" prefer vertical diff and ignore whitespace
set diffopt+=vertical,iwhite

set includeexpr=**/

" all backup moved at one place
set backupdir=~/.vim/backup,.
set directory=~/.vim/backup,.

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " " " Leader is the space key
let g:mapleader = " "

let maplocalleader = "\\"
let g:maplocalleader = "\\"

" easier write
nmap <leader>w :w!<cr>
" easier quit
nmap <leader>q :q<cr>
nmap <leader>Q :q!<cr>

"paste from outside buffer
nnoremap <leader>p :set paste<CR>"+p:set nopaste<CR>
vnoremap <leader>p <Esc>:set paste<CR>gv"+p:set nopaste<CR>

"copy to outside buffer
nnoremap <leader>y "+yy
vnoremap <leader>y "+y

"select all
nnoremap <leader>a ggVG
"paste from 0 register
"Useful because `d` overwrites the <quote> register
nnoremap <leader>P "0p
vnoremap <leader>P "0p

" open file in new split
nnoremap <leader>nf <c-w>v gf

" surround shortcuts
nmap <leader>) ysiw)
nmap <leader>( ysiw(
nmap <leader>] ysiw]
nmap <leader>[ ysiw[
nmap <leader>} ysiw}
nmap <leader>{ ysiw{
nmap <leader>' ysiw'
nmap <leader>" ysiw"
nmap <leader>> ysiw>

" diff merging
nmap <leader>du :diffupdate<cr>
nnoremap <leader>dg :diffget<cr>
nnoremap <leader>dl :diffget //2<cr>diffupdate<cr>
nnoremap <leader>dr :diffget //3<cr>diffupdate<cr>

" Navigation in splits
" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

map <C-h> :call WinMove('h')<cr>
map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-l> :call WinMove('l')<cr>

" move in long lines
nnoremap k gk
nnoremap j gj

nnoremap <Leader>e :e%<CR>

nnoremap <leader>x :nohlsearch<CR>

command! -nargs=1 Silent
\ | execute ':silent '.<q-args>
\ | execute ':redraw!'

" Mappings to access buffers (don't use "\p" because a
" delay before pressing "p" would accidentally paste).
" \l       : list buffers
" \b \f \g : go back/forward/last-used
" \1 \2 \3 : go to buffer 1/2/3 etc
nnoremap <Leader>l :ls<CR>
" unimpaired [b ]b for previous/next buffer
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  set grepprg=ag\ --hidden\ --vimgrep
  set grepformat=%f:%l:%c:%m
  command! -nargs=+ Grep :Silent grep <args>

  let g:far#source='ag'
endif

" runners
noremap <buffer> <leader>r :w<cr> :!%:p<cr>
noremap <buffer> <leader>m :w<cr> :make<cr><cr>

nnoremap <leader>f :NERDTreeFind<cr><C-w>=
nnoremap <leader>t :NERDTreeToggle<cr><C-w>=
nnoremap <leader>s :Git<cr>
nnoremap <leader>d :Gdiff<cr>
nnoremap <leader>b :Gblame<cr>
nnoremap <leader>o :only<cr>

nnoremap <leader>u :GitGutterUndoHunk<CR>

nmap <leader>gv :Gitv --all<cr>
nmap <leader>gV :Gitv! --all<cr>
vmap <leader>gV :Gitv! --all<cr>



command! Vimrc :tabe ~/.vimrc
command! Srcvim :source ~/.vimrc

"automatically change the PWD to the current file direction
" set autochdir

" autoload buffers
set autoread
autocmd FocusGained * checktime

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
autocmd FileType javascript setlocal suffixesadd+=.es6 tabstop=2 shiftwidth=2 ts=2 filetype=javascript.jsx
autocmd BufRead,BufNewFile *.es6 set filetype=javascript
autocmd BufWritePost * silent execute "! [ -e .git/hooks/ctags ] && .git/hooks/ctags 2>/dev/null &"

autocmd FileType typescript setlocal suffixesadd+=.js tabstop=2 shiftwidth=2 ts=2
autocmd BufRead,BufNewFile *.tsx set filetype=typescript.tsx syntax=typescript

" supports comments in json files
autocmd FileType json syntax match Comment +\/\/.\+$+

" find files in project
set path+=**
" still exclude node_modules from the search; could use the CtrlP for this one
set wildignore+=**/node_modules/**
set wildignore+=**/bower_components/**
set wildignore+=**/site-packages/**

" ctrlp settings
let g:ctrlp_extensions = ['tag']
nnoremap <F4> :CtrlPTag<cr>

set tags^=../.git/tags

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.dotfiles/UltiSnips"

"vim-airline"
set laststatus=2 " statusbar in single file open
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols = get(g:, 'airline_symbols', {})
let g:airline_symbols.space = "\ua0"
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

"emmet settings"
let g:user_emmet_install_global = 1
autocmd FileType html,css,javascript EmmetInstall

let g:javascript_plugin_flow=1

" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" enable patience diff
" started In Diff-Mode set diffexpr (plugin not loaded yet)
if &diff
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif


highlight diffAdded guifg=#00bf00
highlight diffRemoved guifg=#bf0000

" reactjs
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" localvimrc
let g:localvimrc_persistent = 1

""" dasht
" search related docsets
nnoremap <Leader>H :Dasht<Space>

" search ALL the docsets
nnoremap <Leader><Leader>H :Dasht!<Space>

" word expand search related docsets
nnoremap <silent> <Leader>h :call Dasht([expand('<cword>'), expand('<cWORD>')])<Return>

" word expand search ALL the docsets
nnoremap <silent> <Leader><Leader>h :call Dasht([expand('<cword>'), expand('<cWORD>')], '!')<Return>

" search selection in related docsets
vnoremap <silent> <Leader>h y:<C-U>call Dasht(getreg(0))<Return>

" search selection in ALL the docsets
vnoremap <silent> <Leader><Leader>h y:<C-U>call Dasht(getreg(0), '!')<Return>

let g:dasht_filetype_docsets = {}
let g:dasht_filetype_docsets['less'] = ['css']
let g:dasht_filetype_docsets['scss'] = ['css']
let g:dasht_filetype_docsets['javascript'] = ['js', 'React', 'chai', 'sinon']
let g:dasht_filetype_docsets['typescript'] = ['TypeScript', 'JavaScript', 'React', 'chai', 'sinon']
let g:dasht_filetype_docsets['python'] = ['python', 'django']

colorscheme gruvbox
let g:gruvbox_hls_cursor='green'

"fugitive
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif

autocmd BufReadPost fugitive://* set bufhidden=delete
"end fugitive

"coc"
inoremap <silent><expr> <c-space> coc#refresh()

nnoremap <c-t> :CocList symbols<cr>
nnoremap <c-m> :CocFix<cr>

nmap <silent> <leader>jd <Plug>(coc-definition)
nmap <silent> <leader>nd :vsplit<CR> <Plug>(coc-definition)
nmap <silent> <leader>jD <Plug>(coc-declaration)
nmap <silent> <leader>ji <Plug>(coc-implementation)
nmap <silent> <leader>ni :vsplit<CR> <Plug>(coc-implementation)
nmap <silent> <leader>jr <Plug>(coc-references)
nmap <silent> <leader>jR <Plug>(coc-rename)
nmap <silent> <leader>.  <Plug>(coc-codeaction)
vmap <silent> <leader>.  <Plug>(coc-codeaction-selected)

nmap <silent> <leader>je <Plug>(coc-diagnostic-info)
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)
nmap <silent> [g <Plug>(coc-diagnostic-prev-error)
nmap <silent> ]g <Plug>(coc-diagnostic-next-error)

"coc extensions
let g:coc_global_extensions=['coc-css', 'coc-dictionary', 'coc-eslint', 'coc-highlight', 'coc-html', 'coc-json', 'coc-prettier', 'coc-python', 'coc-snippets', 'coc-tag',  'coc-tsserver', 'coc-tslint-plugin', 'coc-ultisnips']

autocmd FileType python let b:coc_root_patterns=['.pylintrc']

"coc snippets"
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for format selected region
xmap <F12> <Plug>(coc-format-selected)
nmap <F12> <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,typescript.tsx,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>c  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
command! -nargs=0 SI :!$(npm bin)/tslint -c tslint.fix.json --fix %

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" coc hijacks <c-i> for other than forward jump; hence reset
silent! unmap <c-i>

" ALE config
let g:ale_linters_explicit = 1
let g:ale_linters = {
\ 'python': ['pycodestyle', 'pylint'],
\ 'sh': ['shellcheck']
\}

let g:ale_fixers = {
\ 'python': ['black', 'isort'],
\}
let g:ale_fix_on_save = 1

let g:airline#extensions#ale#enabled = 1

function! LintWarnings() abort
  let l:coc_info = get(b:, 'coc_diagnostic_info', {})
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:total = l:counts.warning + l:counts.style_warning + get(l:coc_info, 'warning', 0)
  return l:total == 0 ? '' : printf('W:%d', l:total)
endf

function! LintErrors() abort
  let l:coc_info = get(b:, 'coc_diagnostic_info', {})
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:total = l:counts.error + l:counts.style_error + get(l:coc_info, 'error', 0)
  return l:total == 0 ? '' : printf('E:%d', l:total)
endf

"coc vim-airline"
let g:airline_section_error = '%{airline#util#wrap(LintErrors(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(LintWarnings(),0)}'
